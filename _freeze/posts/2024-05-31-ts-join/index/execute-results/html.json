{
  "hash": "98653601a0fbdff5d76c717f8a2404a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Time-specific temperature exposures for DHS survey respondents\"\ndescription: |\n  Fine-tune an analysis by incorporating temporal information from a DHS survey\n  with longitudinal environmental data\nauthor: \n  - name: \"Finn Roberts\"\n    affiliation: Senior Data Analyst, IPUMS\ndate: 05-31-2024\ncategories:\n  - CHIRTS\n  - Temperature\n  - Heat\n  - Longitudinal analysis\n  - Time series\n  - Multilevel modeling\n  - Extreme weather\n  - terra\n  - lme4\n  - tidyr\n  - R\nfig-width: 10\nfig-height: 8\nimage: index_files/figure-html/listing-img-1.png\nopen-graph:\n  title: |\n    Time-specific temperature exposures for DHS \n    survey respondents\n  description: |\n    Fine-tune an analysis by incorporating temporal information from a DHS \n    survey with longitudinal environmental data\n  image: index_files/figure-html/listing-img-1.png\ntwitter-card:\n  title: |\n    Time-specific temperature exposures for DHS \n    survey respondents\n  description: |\n    Fine-tune an analysis by incorporating temporal information from a DHS \n    survey with longitudinal environmental data\n  image: index_files/figure-html/listing-img-1.png\n---\n\n::: {.cell}\n\n:::\n\n\n\nIn our [last technical post](../2024-04-15-chirts-metrics/), we\ndemonstrated how to calculate several different monthly temperature\nmetrics with the ultimate goal of linking these values to individual\nchild records in the 2012 Mali DHS survey.\n\nHowever, in contrast to the technique we used in our [CHIRPS\npost](../2024-02-04-dhs-chirps), we can't simply join our temperature\ndata onto our DHS sample by enumeration cluster alone because each child\nin our sample has a different birth date, and therefore different\ntemperature exposure prior to birth.\n\nTo account for this, we need to join our temperature data to each child\nsurvey record both by **enumeration cluster** (which contains the\nspatial information) *as well as* the child's **birth date** (which\ncontains the temporal information).\n\nFirst, we'll identify the monthly CHIRTS data corresponding to each of\nour enumeration cluster areas, producing a time series of temperature\nvalues for each cluster. Next, we'll identify the time series of\ntemperature values for the 9 months prior to each child's birth and use\nit to calculate trimester-specific temperature exposure values for each\nchild. Finally, we'll use the joined data to build a simple model\npredicting birth weight outcomes from temperature exposure.\n\nThis post will build on our [previous\npost](../2024-04-15-chirts-metrics/) where we built several monthly\ntemperature metrics. If you haven't had the chance to read through that\npost yet, we encourage you to start there.\n\nBefore getting started, we'll load the necessary packages for this post:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ipumsr)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(terra)\n```\n:::\n\n\n\n# Data\n\n## DHS survey data\n\nWe will obtain 2012 Mali data from IPUMS DHS. In this extract, we've\nselected the following variables:\n\n-   `HEIGHTFEM`: Height of woman in centimeters\n-   `KIDSEX`: Sex of child\n-   `KIDDOBCMC`: Child's date of birth (CMC)\n-   `BIRTHWT`: Birth weight in kilos\n-   `BIRTHWTREF`: Source of weight at birth (health card or recall)\n\n<!-- - `HWHAZWHO`: Height for age standard deviations from median (WHO)  -->\n\n<!--      *TODO* Should this be removed?  -->\n\nCheck out our [walkthrough](../2024-02-02-download-dhs-data/) for\ndownloading IPUMS DHS data if you need help producing a similar extract.\n\nWe'll load our data using `{ipumsr}`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_dhs <- read_ipums_micro(\"data/idhs_00021.xml\")\n#> Use of data from IPUMS DHS is subject to conditions including that users should cite the data appropriately. Use command `ipums_conditions()` for more details.\n\nml_dhs\n#> # A tibble: 10,326 × 48\n#>    SAMPLE            SAMPLESTR     COUNTRY    YEAR IDHSPID IDHSHID DHSID IDHSPSU\n#>    <int+lbl>         <chr+lbl>     <int+lbl> <int> <chr>   <chr>   <chr>   <dbl>\n#>  1 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  2 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  3 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  4 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  5 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  6 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  7 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  8 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#>  9 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#> 10 46605 [Mali 2012] 46605 [Mali … 466 [Mal…  2012 46605 … 46605 … ML20… 4.66e10\n#> # ℹ 10,316 more rows\n#> # ℹ 40 more variables: IDHSSTRATA <dbl>, CASEID <chr>, HHID <chr>, PSU <dbl>,\n#> #   STRATA <dbl>, DOMAIN <dbl>, HHNUM <dbl>, CLUSTERNO <dbl>, LINENO <int>,\n#> #   BIDX <int>, PERWEIGHT <dbl>, KIDWT <dbl>, AWFACTT <dbl>, AWFACTU <dbl>,\n#> #   AWFACTR <dbl>, AWFACTE <dbl>, AWFACTW <dbl>, DVWEIGHT <dbl>,\n#> #   URBAN <int+lbl>, GEO_ML1987_2018 <int+lbl>, GEO_ML1995_2018 <int+lbl>,\n#> #   GEO_ML2012 <int+lbl>, AGE <int>, AGE5YEAR <int+lbl>, RESIDENT <int+lbl>, …\n```\n:::\n\n\n\n## DHS boundaries\n\nWe'll use the Mali borders that we prepared in our previous [CHIRTS\npost](../2024-04-15-chirts-metrics/). We describe the process there, but\nwe've reproduced the code in the following collapsed block if you need\nto refresh your memory. As a reminder, you can obtain IPUMS integrated\ngeography files from [this\ntable](https://www.idhsdata.org/idhs/gis.shtml).\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Border preparation\"}\nml_borders <- read_ipums_sf(\"data/gps/geo_ml1995_2018.zip\")\n\n# Validate internal borders\nml_borders_neat <- st_make_valid(ml_borders)\n\n# Collapse internal borders to get single country border\nml_borders_out <- ml_borders_neat |> \n  st_union() |> \n  st_simplify(dTolerance = 1000) |> \n  st_as_sf()\n\n# Transform to UTM 29N coordinates, buffer, and convert back to WGS84\nml_borders_buffer <- ml_borders_out |> \n  st_transform(crs = 32629) |> \n  st_buffer(dist = 10000) |>\n  st_transform(crs = 4326)\n```\n:::\n\n\n\n## DHS enumeration clusters\n\nWe can download the enumeration cluster coordinates from the [DHS\nProgram](https://www.dhsprogram.com/). We first described this process\nin our [CHIRPS post](../2024-02-04-dhs-chirps/#dhs-cluster-coordinates).\nSimply follow the same instructions, substituting Mali where we\npreviously used Burkina Faso.\n\nYou should obtain a file called `MLGE6BFL.zip`, which can be loaded with\n`read_ipums_sf()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_clust <- read_ipums_sf(\"data/MLGE6BFL.zip\")\n```\n:::\n\n\n\nAs we've done [in the past](../2024-02-04-dhs-chirps/#cluster-buffers),\nwe'll buffer our cluster coordinates so we capture the environmental\neffects of the general region around each survey location\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_clust_buffer <- ml_clust |> \n  st_transform(crs = 32629) |> \n  st_buffer(dist = 10000) |>\n  st_transform(crs = 4326)\n```\n:::\n\n\n\n## CHIRTS\n\nFor this post, we'll use the monthly heatwave proportions that we\ncalculated at the end of our [previous CHIRTS\npost](../2024-04-15-chirts-metrics/#heatwaves-consecutive-days-above-a-temperature-threshold).\n\nHowever for the purposes of demonstration, in that post we used a single\nyear of CHIRTS data. Now that we're planning to attach temperature data\nto our DHS survey data, we need to consider the full range of birth\ndates represented in our sample.\n\n### Extending CHIRTS time series\n\nThe DHS contains records for children born **within 5 years** of the\nsurvey date to women between 15 and 49 years of age. Thus, for the 2012\nMali sample, we will have records for children ranging from 2008-2012.\nFurther, since we want to identify monthly weather records for the time\n**preceding** each birth, we will also need to have data for the year\nprior to the earliest birth in the sample.\n\nThat means that for our 2012 Mali sample, we'll actually need CHIRTS\ndata for 2007-2012.\n\nFortunately, the pipeline we set up in our previous post can be easily\nscaled to accommodate additional years of data. Recall that we built a\ndedicated function to calculate monthly heatwave proportions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop_heatwave <- function(temps, thresh, n_seq) {\n  # Convert to RLE of days above threshold\n  bin_rle <- rle(temps >= thresh)\n  \n  # Identify heatwave events based on sequence length\n  is_heatwave <- bin_rle$values & (bin_rle$lengths >= n_seq)\n  \n  # Count heatwave days and divide by total number of days\n  sum(bin_rle$lengths[is_heatwave]) / length(temps)\n}\n```\n:::\n\n\n\nAll we need to do, then, is apply this function to input CHIRTS data for\n2007 to 2012, rather than just for 2012. To do so, we've downloaded all\n6 years of data manually as [described\npreviously](../2024-04-15-chirts-metrics/#manual-download) and placed\neach file in a `data/chirts` directory.\n\nWe can load them by first obtaining the file path to each file with\n`list.files()`. Then, we use the familiar `rast()` to load all 6 files\ninto a single `SpatRaster`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchirts_files <- list.files(\"data/chirts\", full.names = TRUE)\n\nml_chirts <- rast(chirts_files)\n```\n:::\n\n\n\nAs we did last time, we'll crop the CHIRTS raster to the region directly\naround Mali:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_chirts <- crop(ml_chirts, ml_borders_buffer, snap = \"out\")\n```\n:::\n\n\n\nNow we can use the `tapp()` function introduced in our previous post to\ncalculate monthly heatwave proportions for each month/year combination.\nThe only difference here is that we use `index = \"yearmonths\"` instead\nof `index = \"months\"` since we have multiple years of data. This ensures\nthat we don't aggregate months together across years.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate monthly proportion of heatwave days\nml_chirts_heatwave <- tapp(\n  ml_chirts,\n  function(x) prop_heatwave(x, thresh = 35, n_seq = 3),\n  index = \"yearmonths\" # New index to account for multiple years\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nAs expected, we now have a `SpatRaster` with 72 layers: one for each\nmonth/year combination from 2007-2012. Each layer contains the\nproportion of days that met our heatwave threshold of 3+ consecutive\ndays exceeding 35°C.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_chirts_heatwave\n#> class       : SpatRaster \n#> dimensions  : 301, 335, 72  (nrow, ncol, nlyr)\n#> resolution  : 0.05, 0.05  (x, y)\n#> extent      : -12.35, 4.399999, 10.05, 25.1  (xmin, xmax, ymin, ymax)\n#> coord. ref. : lon/lat WGS 84 \n#> source      : ml_chirts_heatwave.nc \n#> names       : ml_ch~ave_1, ml_ch~ave_2, ml_ch~ave_3, ml_ch~ave_4, ml_ch~ave_5, ml_ch~ave_6, ... \n#> time (ymnts): 2007-Jan to 2012-Dec\n```\n:::\n\n\n\n::: callout-caution\nThis post was built using terra 1.7-78. Older versions of terra contain\na [bug](https://github.com/rspatial/terra/issues/1483) that may produce\nincorrect time units when `index = \"yearmonths\"`.\n\nIf you're running an older version of terra, we suggest updating the\npackage with `install.packages(\"terra\")`. Otherwise, you may be able to\ntemporarily avoid the issue by manually setting the correct time values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Manual update of offset date values\nyear_months <- seq(\n  lubridate::ym(\"2007-01\"), \n  lubridate::ym(\"2012-12\"), \n  by = \"months\"\n)\n\ntime(ml_chirts_heatwave) <- year_months\n```\n:::\n\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n# Attach heatwave metrics to DHS survey data\n\nNow that we have our heatwave proportions for the full time range of the\nchildren in our DHS sample, we can shift our focus to joining these two\ndata sources.\n\n## Reconcile date representations\n\nTo deal with the temporal component of the join, we'll need to identify\nthe relevant months of data for each child in our DHS sample. Each\nchild's birth date recorded in the `KIDDOBCMC` variable:\n\n\n\n::: {.cell out.lines='3'}\n\n```{.r .cell-code}\nml_dhs$KIDDOBCMC\n#>     [1] 1311 1301 1316 1356 1305 1337 1301 1318 1337 1313 1354 1313 1326 1312\n#>    [15] 1330 1316 1354 1311 1335 1338 1305 1321 1305 1347 1315 1354 1309 1323\n#>    [29] 1324 1349 1315 1297 1334 1317 1336 1334 1338 1304 1323 1307 1354 1311\n....\n```\n:::\n\n\n\nYou might have expected that these would be dates, but we actually have\na series of 4-digit numbers. This is because dates are encoded as\n**century month codes** in the DHS. A century month code (CMC) encodes\ntime as the number of months that have elapsed since 1900. CMCs are\nuseful for calculating intervals of time, because they can be easily\nadded and subtracted.\n\nHowever, the time encoded in our CHIRTS heatwave data aren't encoded in\nCMC format, so we'll need to reconcile these two time representations.\n\n#### Working with CMCs\n\nSince converting between CMCs and traditional dates is a common and\nwell-defined task, we'll build some helper functions to handle the\nconversion. That way, we can easily convert back and forth without\nhaving to remember the CMC conversion formula each time.\n\nFortunately, the description of the `KIDDOBCMC` variable describes the\narithmetic required to convert. We've translated that text into the\nfollowing function, which takes an input CMC and converts it to\nyear-month format:\n\n::: column-margin\nYou can view the description for any variable in your extract using the\n`ipums_var_desc()` function from ipumsr.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmc_to_ym <- function(cmc) {\n  year <- floor((cmc - 1) / 12) + 1900\n  month <- cmc - ((year - 1900) * 12)\n  \n  year_month <- paste(year, month, sep = \"-\")\n  \n  lubridate::ym(year_month)\n}\n```\n:::\n\n\n\nSimilarly, we'll create a function that goes in the reverse direction:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nym_to_cmc <- function(date) {\n  year <- lubridate::year(date)\n  month <- lubridate::month(date)\n  \n  (year - 1900) * 12 + month\n}\n```\n:::\n\n\n\nFor instance, a CMC of 1307 turns out to be the same as November, 2008:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmc_to_ym(1307)\n#> [1] \"2008-11-01\"\n```\n:::\n\n\n\nAnd vice versa:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nym_to_cmc(\"2008-11-01\")\n#> [1] 1307\n```\n:::\n\n\n\nNow we have an easy way to reconcile the temporal information in our two\ndata sources.\n\n## Attaching heatwaves to DHS clusters\n\nTo extract the average heatwave proportions for each DHS enumeration\ncluster, we'll use terra's `extract()`, which we've introduced\n[previously](../2024-02-04-dhs-chirps/#aggregating-rainfall-within-cluster-regions).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract mean heatwave proportions for each DHS cluster region\nchirts_clust <- extract(\n  ml_chirts_heatwave, \n  ml_clust_buffer, \n  fun = mean,\n  weights = TRUE\n) |> \n  as_tibble()\n\nchirts_clust\n#> # A tibble: 413 × 73\n#>       ID ml_chirts_heatwave_1 ml_chirts_heatwave_2 ml_chirts_heatwave_3\n#>    <int>                <dbl>                <dbl>                <dbl>\n#>  1     1                0.210                0.498                0.806\n#>  2     2                0.226                0.714                0.903\n#>  3     3                0.270                0.910                1    \n#>  4     4                0.226                0.857                0.968\n#>  5     5                0.258                0.898                0.996\n#>  6     6                0.226                0.841                0.935\n#>  7     7                0.169                0.679                0.903\n#>  8     8                0.161                0.5                  0.892\n#>  9     9                0.226                0.858                0.973\n#> 10    10                0.194                0.627                0.924\n#> # ℹ 403 more rows\n#> # ℹ 69 more variables: ml_chirts_heatwave_4 <dbl>, ml_chirts_heatwave_5 <dbl>,\n#> #   ml_chirts_heatwave_6 <dbl>, ml_chirts_heatwave_7 <dbl>,\n#> #   ml_chirts_heatwave_8 <dbl>, ml_chirts_heatwave_9 <dbl>,\n#> #   ml_chirts_heatwave_10 <dbl>, ml_chirts_heatwave_11 <dbl>,\n#> #   ml_chirts_heatwave_12 <dbl>, ml_chirts_heatwave_13 <dbl>,\n#> #   ml_chirts_heatwave_14 <dbl>, ml_chirts_heatwave_15 <dbl>, …\n```\n:::\n\n\n\n### Wide vs. long format\n\n`extract()` provides data in *wide* format, where each column represents\nour temperature values (in this case, **mean proportion of heatwave days\nin a given month**) and each row represents a DHS enumeration cluster.\n\nTo join on our DHS survey data, we'll want our data to be in *long*\nformat, where each row represents a single month of temperature data for\na single DHS cluster. We can accomplish this conversion with the\n`pivot_longer()` function from the `{tidyr}` package.\n\n::: column-margin\n`<div class=\"hex\">\n<a href=\"https://tidyr.tidyverse.org/index.html\" class=\"hex\">\n<img src=\"../../images/hex/tidyr.png\" class=\"hex-img\"/>\n</a>\n<p class=\"hex-cap\">© RStudio, Inc. (MIT)</p>\n</div>`{=html}\n:::\n\nFirst, we'll rename the columns in our extracted data. Currently,\nthey're listed in incremental order, which isn't very intuitive.\nInstead, we'll rename them using the CMC code of the month that each\ncolumn represents. We can use our helper function to convert these dates\nto CMC format.\n\nWe'll also update the `\"ID\"` column to be named `\"DHSID\"` for\nconsistency with the name used in the DHS survey to represent the\nenumeration cluster ID:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sequence of months for the time range in our data\nyear_months <- seq(\n  lubridate::ym(\"2007-01\"), \n  lubridate::ym(\"2012-12\"), \n  by = \"months\"\n)\n\n# Change layer names\nnames(chirts_clust) <- c(\"DHSID\", ym_to_cmc(year_months))\n```\n:::\n\n\n\nNext, we need to convert the incremental ID numbers for each cluster to\ntheir corresponding DHSID code. The ID values in `chirts_clust`\nrepresent the clusters extracted from `ml_clust` in index order. Thus,\nwe simply need to reassign the incremental ID codes in `chirts_clust`\nwith the IDs in `ml_clust`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert index numbers to corresponding DHSID codes\nchirts_clust$DHSID <- ml_clust$DHSID\n\nchirts_clust\n#> # A tibble: 413 × 73\n#>    DHSID  `1285` `1286` `1287` `1288` `1289` `1290`  `1291` `1292` `1293` `1294`\n#>    <chr>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl>\n#>  1 ML201…  0.210  0.498  0.806  1      1      0.935 0.358        0 0.318   1    \n#>  2 ML201…  0.226  0.714  0.903  1      0.999  0.825 0.346        0 0.0355  0.857\n#>  3 ML201…  0.270  0.910  1      0.999  1      0.604 0            0 0       0.150\n#>  4 ML201…  0.226  0.857  0.968  1      1      0.718 0.186        0 0       0.159\n#>  5 ML201…  0.258  0.898  0.996  0.988  1      0.599 0            0 0       0.141\n#>  6 ML201…  0.226  0.841  0.935  1      1      0.572 0            0 0       0.373\n#>  7 ML201…  0.169  0.679  0.903  1      1      0.933 0.305        0 0.427   0.778\n#>  8 ML201…  0.161  0.5    0.892  1      1      0.967 0.581        0 0.5     0.901\n#>  9 ML201…  0.226  0.858  0.973  0.991  1      0.569 0.00296      0 0       0.144\n#> 10 ML201…  0.194  0.627  0.924  1      1      1.00  0.572        0 0.385   0.957\n#> # ℹ 403 more rows\n#> # ℹ 62 more variables: `1295` <dbl>, `1296` <dbl>, `1297` <dbl>, `1298` <dbl>,\n#> #   `1299` <dbl>, `1300` <dbl>, `1301` <dbl>, `1302` <dbl>, `1303` <dbl>,\n#> #   `1304` <dbl>, `1305` <dbl>, `1306` <dbl>, `1307` <dbl>, `1308` <dbl>,\n#> #   `1309` <dbl>, `1310` <dbl>, `1311` <dbl>, `1312` <dbl>, `1313` <dbl>,\n#> #   `1314` <dbl>, `1315` <dbl>, `1316` <dbl>, `1317` <dbl>, `1318` <dbl>,\n#> #   `1319` <dbl>, `1320` <dbl>, `1321` <dbl>, `1322` <dbl>, `1323` <dbl>, …\n```\n:::\n\n\n\nNow we're ready to convert to long format data. `pivot_longer()` will\nconvert a set of columns in our wide data to two columns in our long\ndata. The names of these columns will be stored in one of the output\ncolumns, and their associated values will be stored in the other.\n\nBelow, we indicate that we want to pivot all columns *except* the DHSID\ncolumn (the data are already long on `DHSID`). We also indicate that we\nwant the new column of *names* to be called `\"CHIRTSCMC\"` and the new\ncolumn of *values* to be called `\"PROPHEATWAVE\"`. Finally, we use the\n`names_transform` argument to convert all the names to numeric format,\nso they will be interpretable as CMCs.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to long format for each cluster/month combination\nchirts_clust <- pivot_longer(\n  chirts_clust,\n  cols = -DHSID,\n  names_to = \"CHIRTSCMC\",\n  values_to = \"PROPHEATWAVE\",\n  names_transform = as.numeric\n)\n\nchirts_clust\n#> # A tibble: 29,736 × 3\n#>    DHSID          CHIRTSCMC PROPHEATWAVE\n#>    <chr>              <dbl>        <dbl>\n#>  1 ML201200000001      1285        0.210\n#>  2 ML201200000001      1286        0.498\n#>  3 ML201200000001      1287        0.806\n#>  4 ML201200000001      1288        1    \n#>  5 ML201200000001      1289        1    \n#>  6 ML201200000001      1290        0.935\n#>  7 ML201200000001      1291        0.358\n#>  8 ML201200000001      1292        0    \n#>  9 ML201200000001      1293        0.318\n#> 10 ML201200000001      1294        1    \n#> # ℹ 29,726 more rows\n```\n:::\n\n\n\nAs you can see, each row now corresponds to a cluster/month combination,\nand the corresponding heatwave value is stored in the `PROPHEATWAVE`\ncolumn.\n\n## Joining on DHS survey data\n\nBefore we join our heatwave data on our DHS survey data, we need to do\nsome housekeeping. Some of the variables we want to include in our model\ninclude missing values or implied decimals, which we'll want to clean up\nbefore we try to join the DHS survey with our CHIRTS data.\n\n### DHS survey data preparation\n\nFirst, we'll make a new column that stores a unique ID for each child in\nthe sample by combining the ID for each woman and the index for each of\nher births. This will make it easier to ensure that we join data\nindependently for each child in the sample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str_squish() removes excess whitespace in the ID strings\nml_dhs <- ml_dhs |> \n  mutate(KIDID = stringr::str_squish(paste(IDHSPID, BIDX)))\n```\n:::\n\n\n\nWe'll also want to make sure to recode several of our variables that\ninclude missing values. We can check the missing value codes for a\nvariable using `ipums_val_labels()`. For instance, for our key outcome\nvariable, `BIRTHWT`, we see that all values over `9996` are missing in\nsome way:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nipums_val_labels(ml_dhs$BIRTHWT)\n#> # A tibble: 5 × 2\n#>     val lbl                  \n#>   <int> <chr>                \n#> 1  9995 9995+                \n#> 2  9996 Not weighed at birth \n#> 3  9997 Don't know           \n#> 4  9998 Missing              \n#> 5  9999 NIU (not in universe)\n```\n:::\n\n\n\nLooking at these values, you may be surprised to see 4-digit weights. To\ninvestigate further, we can display detailed variable information with\n`ipums_var_desc()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nipums_var_desc(ml_dhs$BIRTHWT)\n#> [1] \"For children born in the three to five years before the survey, BIRTHWT (M19) reports the child's birthweight in kilos with three implied decimal places (or, alternatively stated, in grams with no decimal places). Children who were not weighed are coded 9996.\"\n```\n:::\n\n\n\nNote that the description mentions that there are 3 implied decimal\nplaces. So, we'll recode `BIRTHWT` to be `NA` in the cases where the\nvalue is more than `9996`, and we'll divide by 1000 otherwise. We'll do\na similar process with a few other variables as well:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_dhs <- ml_dhs |> \n  mutate(\n    BIRTHWT = if_else(BIRTHWT >= 9996, NA, BIRTHWT / 1000),\n    HEIGHTFEM = if_else(HEIGHTFEM >= 9994, NA, HEIGHTFEM / 10),\n    EDUCLVL = if_else(EDUCLVL == 8, NA, EDUCLVL),\n    BIRTHWTREF = if_else(BIRTHWTREF >= 7, NA, BIRTHWTREF)\n  )\n```\n:::\n\n\n\n::: callout-caution\n## Censoring\n\nIn practice, we would likely want to deal with `BIRTHWT` values of\n`9995+`, which represent all weights above the 9.995 kg threshold. It's\nnot fully correct to treat these values as *equal* to 9.995, since their\nvalues are actually unknown. This problem is known as **censoring**, but\nwe won't address it in this post to keep this demonstration focused on\nour core goal of integrating environmental data with DHS surveys.\n:::\n\n#### Residency\n\nWhen working with environmental data, we want to be attentive to the\nmembers of the sample who may have recently moved to a location, as\nrecent arrivals likely didn't experience the previous environmental\neffects recorded for the area they currently live!\n\nIPUMS DHS includes the `RESIDEINTYR` variable to indicate how long\nsurvey respondents have lived at their current location.\n\nUnfortunately, this variable wasn't collected for the Mali 2012 sample.\nHowever, we do have a record of whether a respondent is a visitor to the\nlocation or not. At a minimum, we'll remove records for those who are\nlisted as visitors, since we can't be confident that they experienced\nthe environmental data for the cluster their response was recorded in.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_dhs <- ml_dhs |> \n  filter(RESIDENT == 1)\n```\n:::\n\n\n\n#### Data types\n\nFinally, we want to recode our variables to the appropriate data type.\nIn our case, we just need to convert all labeled variables to factors.\n`BIDX` is unlabeled, but represents a factor, so we'll explicitly\nconvert that variable as well:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_dhs <- ml_dhs |> \n  mutate(BIDX = as_factor(BIDX)) |> \n  as_factor() # Convert all remaining labeled columns to factors\n```\n:::\n\n\n\n### Attaching data sources\n\nAt its simplest, we could join our prepared DHS survey data with our\nextracted heatwave data by matching records based on their cluster and\nbirth month. We can use `left_join()` from `{dplyr}` to do so. This will\nretain all records in our DHS survey sample and attach temperature\nvalues where the birth date (`KIDDOBCMC`) is equal to the month of\ntemperature data in `chirts_clust`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join temperature exposure for each child during the month of their birth\nleft_join(\n  ml_dhs,\n  chirts_clust,\n  by = c(\"DHSID\", \"KIDDOBCMC\" = \"CHIRTSCMC\")\n)\n```\n:::\n\n\n\nHowever, this only attaches a single month of temperature data for each\nchild. What we'd rather have is a time series of values covering the\ntime between conception and birth.\n\nTo accomplish this, we can define a new variable, `KIDCONCEPTCMC`, which\ncontains the CMC of the month 9 months before the birth date.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make unique ID for each kid using woman's ID and Birth index\nml_dhs <- ml_dhs |>  \n  mutate(KIDCONCEPTCMC = KIDDOBCMC - 9)\n```\n:::\n\n\n\nNow, we want to join *all 9* of the relevant monthly temperature records\nto each child's DHS survey record. That is, we want to match records\nthat have the same `DHSID`, a **birthdate** that is *after* the CHIRTS\ndata that will be joined, and a **conception date** that is *before* the\nCHIRTS data that will be joined. We can use `join_by()` from `{dplyr}`\nto specify these more complex criteria:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join 9 months of CHIRTS data to each child record\nml_dhs_chirts <- left_join(\n  ml_dhs,\n  chirts_clust,\n  by = join_by(\n    DHSID == DHSID, # Cluster ID needs to match\n    KIDDOBCMC > CHIRTSCMC, # DOB needs to be after all joined temp. data\n    KIDCONCEPTCMC <= CHIRTSCMC # Conception date needs to be before all joined temp. data\n  )\n)\n```\n:::\n\n\n\nWe should end up with a dataset that contains 9 records for each child:\none for each month between their conception and birth. We can confirm by\ncounting the records for each `KIDID`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Each kid should have 9 rows now\nml_dhs_chirts |> \n  count(KIDID)\n#> # A tibble: 10,300 × 2\n#>    KIDID               n\n#>    <chr>           <int>\n#>  1 46605 1 14 2 1      9\n#>  2 46605 1 16 2 1      9\n#>  3 46605 1 16 5 1      9\n#>  4 46605 1 16 5 2      9\n#>  5 46605 1 4 2 1       9\n#>  6 46605 1 42 2 1      9\n#>  7 46605 1 42 2 2      9\n#>  8 46605 1 50 2 1      9\n#>  9 46605 1 75 12 1     9\n#> 10 46605 1 75 12 2     9\n#> # ℹ 10,290 more rows\n```\n:::\n\n\n\nWe can pull out a few columns for an individual child to make it more\nclear how things are being joined:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of what our data look like for one kid:\nml_dhs_chirts |> \n  filter(KIDID == \"46605 1 4 2 1\") |> \n  select(KIDID, DHSID, KIDDOBCMC, CHIRTSCMC, PROPHEATWAVE)\n#> # A tibble: 9 × 5\n#>   KIDID         DHSID          KIDDOBCMC CHIRTSCMC PROPHEATWAVE\n#>   <chr>         <chr>              <dbl>     <dbl>        <dbl>\n#> 1 46605 1 4 2 1 ML201200000001      1311      1302       0.822 \n#> 2 46605 1 4 2 1 ML201200000001      1311      1303       0.103 \n#> 3 46605 1 4 2 1 ML201200000001      1311      1304       0     \n#> 4 46605 1 4 2 1 ML201200000001      1311      1305       0.244 \n#> 5 46605 1 4 2 1 ML201200000001      1311      1306       0.787 \n#> 6 46605 1 4 2 1 ML201200000001      1311      1307       0.624 \n#> 7 46605 1 4 2 1 ML201200000001      1311      1308       0     \n#> 8 46605 1 4 2 1 ML201200000001      1311      1309       0.0968\n#> 9 46605 1 4 2 1 ML201200000001      1311      1310       0.741\n```\n:::\n\n\n\nAs we can see, an individual child (`KIDID`) is associated with heatwave\ndata (`PROPHEATWAVE`) for each of the 9 CHIRTS months (`CHIRTSCMC`)\nprior to their birth date (`KIDDOBCMC`).\n\nFor a different child we'll get a similar output, but because this child\nhas a different birth date, the specific `PROPHEATWAVE` values will be\ndifferent, even if the cluster ID is the same:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_dhs_chirts |> \n  filter(KIDID == \"46605 1255 2 2\") |> \n  select(KIDID, DHSID, KIDDOBCMC, CHIRTSCMC, PROPHEATWAVE)\n#> # A tibble: 9 × 5\n#>   KIDID          DHSID          KIDDOBCMC CHIRTSCMC PROPHEATWAVE\n#>   <chr>          <chr>              <dbl>     <dbl>        <dbl>\n#> 1 46605 1255 2 2 ML201200000001      1305      1296        0    \n#> 2 46605 1255 2 2 ML201200000001      1305      1297        0    \n#> 3 46605 1255 2 2 ML201200000001      1305      1298        0.345\n#> 4 46605 1255 2 2 ML201200000001      1305      1299        1    \n#> 5 46605 1255 2 2 ML201200000001      1305      1300        0.999\n#> 6 46605 1255 2 2 ML201200000001      1305      1301        1    \n#> 7 46605 1255 2 2 ML201200000001      1305      1302        0.822\n#> 8 46605 1255 2 2 ML201200000001      1305      1303        0.103\n#> 9 46605 1255 2 2 ML201200000001      1305      1304        0\n```\n:::\n\n\n\nSimilarly, for a child from a different cluster, we'll have different\n`PROPHEATWAVE` values regardless of which month is under consideration:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_dhs_chirts |> \n  filter(KIDID == \"46605 518171 3 1\") |> \n  select(KIDID, DHSID, KIDDOBCMC, CHIRTSCMC, PROPHEATWAVE)\n#> # A tibble: 9 × 5\n#>   KIDID            DHSID          KIDDOBCMC CHIRTSCMC PROPHEATWAVE\n#>   <chr>            <chr>              <dbl>     <dbl>        <dbl>\n#> 1 46605 518171 3 1 ML201200000518      1314      1305       0.379 \n#> 2 46605 518171 3 1 ML201200000518      1314      1306       0.877 \n#> 3 46605 518171 3 1 ML201200000518      1314      1307       0.456 \n#> 4 46605 518171 3 1 ML201200000518      1314      1308       0     \n#> 5 46605 518171 3 1 ML201200000518      1314      1309       0.0213\n#> 6 46605 518171 3 1 ML201200000518      1314      1310       0.505 \n#> 7 46605 518171 3 1 ML201200000518      1314      1311       0.923 \n#> 8 46605 518171 3 1 ML201200000518      1314      1312       1     \n#> 9 46605 518171 3 1 ML201200000518      1314      1313       1\n```\n:::\n\n\n\nNow that we have the correct 9-month time series for each child, we can\nfurther aggregate to get a trimester-specific exposure metric for each\nchild.\n\nFirst, we'll create a `TRIMESTER` variable, which encodes the trimester\nthat each month belongs to for each child:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nml_dhs_chirts <- ml_dhs_chirts |> \n  arrange(DHSID, KIDID, CHIRTSCMC) |> # order by CMC to ensure trimesters are in correct order\n  mutate(TRIMESTER = as_factor(rep(c(1, 2, 3), each = 3)), .by = KIDID)\n```\n:::\n\n\n\nThen, we'll average the heatwave proportions across trimesters for each\nchild:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Average proportion of heatwave days within each child and trimester\nml_dhs_tri <- ml_dhs_chirts |> \n  summarize(\n    MEANPROPHEATWAVE = mean(PROPHEATWAVE), \n    .by = c(KIDID, TRIMESTER)\n  )\n\nml_dhs_tri\n#> # A tibble: 30,900 × 3\n#>    KIDID          TRIMESTER MEANPROPHEATWAVE\n#>    <chr>          <fct>                <dbl>\n#>  1 46605 1 14 2 1 1                    0.439\n#>  2 46605 1 14 2 1 2                    0.218\n#>  3 46605 1 14 2 1 3                    0.781\n#>  4 46605 1 16 2 1 1                    0.240\n#>  5 46605 1 16 2 1 2                    0.903\n#>  6 46605 1 16 2 1 3                    0.731\n#>  7 46605 1 16 5 1 1                    0.944\n#>  8 46605 1 16 5 1 2                    0.322\n#>  9 46605 1 16 5 1 3                    0.578\n#> 10 46605 1 16 5 2 1                    0.115\n#> # ℹ 30,890 more rows\n```\n:::\n\n\n\nWe now have 3 records for each child—one for each trimester. Our\ntemperature metric now represents the average monthly proportion of days\nspent in a heatwave across the three months of each trimester *as well\nas* across the spatial region of each buffered cluster region.\n\nRecall that in this case we define a heatwave day as any day belonging\nto a sequence of at least 3 days over 35°C.\n\n# A basic model\n\nTo complete this post, we'll use our prepared data to generate a model\npredicting birth weight outcomes from heatwave exposure. We'll interact\nheatwave exposure with the trimester of exposure to determine whether\nthe effects of heatwave exposure may differ across trimesters.\n\nWe'll also include several covariates and control variables, including\nchild's sex, mother's age and height, birth order, education level, and\nthe source of birth weight data.\n\n::: callout-note\nWe're building this model primarily to demonstrate how you might use\naggregated survey and environmental data. It's not intended to be be a\ncomprehensive modeling approach, and there are likely other variables\nthat should be considered and included.\n:::\n\nFirst, we need to reattach our covariates to our trimester-aggregated\ndata from the previous step. We'll do so by selecting our variables of\ninterest and joining them back on our heatwave exposure metrics\ncalculated for each trimester and child ID.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select covariates of interest. We want a single row of covariates for each\n# KIDID\nml_dhs_chirts_sub <- ml_dhs_chirts |> \n  select(\n    DHSID, IDHSPID, KIDID, KIDSEX, BIDX, EDUCLVL, \n    BIRTHWTREF, BIRTHWT, AGE, TRIMESTER, HEIGHTFEM\n  ) |> \n  distinct() # Remove extra month-level records for each trimester\n\n# Join trimester-aggregated data to covariates\nml_dhs_tri <- full_join(\n  ml_dhs_tri,\n  ml_dhs_chirts_sub,\n  by = c(\"KIDID\", \"TRIMESTER\")\n)\n```\n:::\n\n\n\nNow, we can build a random effects model using `lmer` from the `{lme4}`\npackage. We won't get into all the details of random effects models in\nthis post; for now, it's enough to know that these models allow you to\nmodel a separate intercept for observations that belong to different\ngroups. In this case, we fit separate intercepts for each enumeration\narea `(1 | DHSID)`. This allows us to account for some of the\ncorrelation between child observations from the same spatial area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatwave_mod <- lme4::lmer(\n  BIRTHWT ~ MEANPROPHEATWAVE * TRIMESTER + KIDSEX + AGE + BIDX + \n    EDUCLVL + BIRTHWTREF + HEIGHTFEM + (1 | DHSID),\n  data = ml_dhs_tri\n)\n```\n:::\n\n\n\n::: column-margin\n`<div class=\"hex\">\n<a href=\"https://www.danieldsjoberg.com/gtsummary/index.html\" class=\"hex\">\n<img src=\"../../images/hex/gtsummary.png\" class=\"hex-img\"/>\n</a>\n<p class=\"hex-cap\">© Daniel D. Sjoberg et al. (MIT)</p>\n</div>`{=html}\n:::\n\nWe can summarize our results with the `{gtsummary}` package. Based on\nthe confidence intervals reported in this output, it appears that there\nmay be a slight negative relationship between the proportion of heatwave\ndays and birth weight, but the results are not definitive.\n\nThe interaction terms suggest that heatwave suggest that the effect of\nheatwave days on birth weight is slightly more positive in trimester 2\nas compared to the effect during trimester 1.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show table code\"}\nlibrary(gtsummary)\n\ntbl_regression(\n  heatwave_mod, \n  conf.int = TRUE,\n  tidy_fun = broom.mixed::tidy,\n  label = list(\n    MEANPROPHEATWAVE = \"Mean proportion of days in heatwave\",\n    TRIMESTER = \"Trimester\",\n    BIDX = \"Birth order\",\n    EDUCLVL = \"Education level\",\n    BIRTHWTREF = \"Birth weight source\",\n    HEIGHTFEM = \"Mother's height (cm)\",\n    `DHSID.sd__(Intercept)` = \"Random effects: Enumeration cluster (SD)\",\n    `Residual.sd__Observation` = \"Random effects: Residual (SD)\"\n  )\n) |> \n  italicize_labels() |> \n  modify_header(update = list(label = \"\")) |> \n  as_gt() |>\n  gt::tab_header(\n    gt::md(\"# Effects of Heatwave Days on Birthweight\")\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"udmusernns\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#udmusernns table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#udmusernns thead, #udmusernns tbody, #udmusernns tfoot, #udmusernns tr, #udmusernns td, #udmusernns th {\n  border-style: none;\n}\n\n#udmusernns p {\n  margin: 0;\n  padding: 0;\n}\n\n#udmusernns .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#udmusernns .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#udmusernns .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#udmusernns .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#udmusernns .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#udmusernns .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#udmusernns .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#udmusernns .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#udmusernns .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#udmusernns .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#udmusernns .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#udmusernns .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#udmusernns .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#udmusernns .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#udmusernns .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#udmusernns .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#udmusernns .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#udmusernns .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#udmusernns .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#udmusernns .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#udmusernns .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#udmusernns .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#udmusernns .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#udmusernns .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#udmusernns .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#udmusernns .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#udmusernns .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#udmusernns .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#udmusernns .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#udmusernns .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#udmusernns .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#udmusernns .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#udmusernns .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#udmusernns .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#udmusernns .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#udmusernns .gt_left {\n  text-align: left;\n}\n\n#udmusernns .gt_center {\n  text-align: center;\n}\n\n#udmusernns .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#udmusernns .gt_font_normal {\n  font-weight: normal;\n}\n\n#udmusernns .gt_font_bold {\n  font-weight: bold;\n}\n\n#udmusernns .gt_font_italic {\n  font-style: italic;\n}\n\n#udmusernns .gt_super {\n  font-size: 65%;\n}\n\n#udmusernns .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#udmusernns .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#udmusernns .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#udmusernns .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#udmusernns .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#udmusernns .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#udmusernns .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style><h1 id=\"effects-of-heatwave-days-on-birthweight\">Effects of Heatwave Days on Birthweight</h1>\n</td>\n    </tr>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"\"></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Beta&lt;/strong&gt;\"><strong>Beta</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;95% CI&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>95% CI</strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Mean proportion of days in heatwave</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">-0.08</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.22, 0.05</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Trimester</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    1</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">—</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">—</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    2</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">-0.10</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.20, 0.00</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    3</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">-0.01</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.11, 0.09</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Sex of child</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Male</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">—</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">—</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Female</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">-0.15</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.20, -0.10</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Age</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.01</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">0.01, 0.01</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Birth order</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    1</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">—</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">—</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    2</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.06</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">0.01, 0.12</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    3</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.12</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.02, 0.26</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    4</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">-0.55</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-1.1, 0.01</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Education level</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    No education</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">—</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">—</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Primary</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.07</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.01, 0.14</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Secondary</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.08</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">0.01, 0.16</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Higher</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.04</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.14, 0.22</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Birth weight source</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    From written card</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">—</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">—</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    From mother's recall</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.12</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">0.06, 0.18</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Mother's height (cm)</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.00</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">0.00, 0.00</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Mean proportion of days in heatwave * Trimester</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Mean proportion of days in heatwave * 2</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.22</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">0.03, 0.41</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    Mean proportion of days in heatwave * 3</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.03</td>\n<td headers=\"ci\" class=\"gt_row gt_center\">-0.16, 0.21</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Random effects: Enumeration cluster (SD)</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.58</td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-style: italic;\">Random effects: Residual (SD)</td>\n<td headers=\"estimate\" class=\"gt_row gt_center\">0.82</td>\n<td headers=\"ci\" class=\"gt_row gt_center\"><br /></td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"3\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span> CI = Confidence Interval</td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell .column-page}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show plot code\"}\nsjPlot::plot_model(\n  heatwave_mod, \n  title = \"Heatwave Model Coefficients\", \n  vline.color = \"#00263A\",\n  colors = \"#98579B\",\n  axis.labels = rev(c(\n    \"Mean monthly proportion of days in heatwave\",\n    \"Trimester: 2\",\n    \"Trimester: 3\",\n    \"Sex: Female\",\n    \"Mother's age\",\n    \"Birth index: 2\",\n    \"Birth index: 3\",\n    \"Birth index: 4\",\n    \"Highest education: Primary\",\n    \"Highest education: Secondary\",\n    \"Highest education: Higher\",\n    \"Source of weight: Mother's recall\",\n    \"Mother's height\",\n    \"Heatwave x Trimester: 2\",\n    \"Heatwave x Trimester: 3\"\n  ))\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/listing-img-1.png){width=100%}\n:::\n:::\n\n\n\nWe've now demonstrated a full workflow to obtain raw CHIRTS raster data,\ncalculate monthly heat exposure metrics, join them on survey records\nbased on the timing of those records, and finally producing a model to\nunderstand the impacts of our heatwave definition.\n\nObviously, for your specific research questions many of these steps will\nneed to change, but we've introduced many of the core tools you need\nwhen integrating environmental data with DHS surveys. Even if you modify\nthe sources and metrics you use, you should have an understanding of\nsome of the technical considerations that go into this kind of research.\n\n## Getting Help {.appendix}\n\nQuestions or comments? Check out the [IPUMS User\nForum](https://forum.ipums.org) or reach out to IPUMS User Support at\nipums\\@umn.edu.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}